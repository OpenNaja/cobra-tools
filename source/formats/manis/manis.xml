<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE niftoolsxml>
<niftoolsxml version="0.7.1.0">

	<token name="verexpr" attrs="vercond">
		<verexpr token="#DLA#" string="(#VER# #EQ# 256)">DLA</verexpr>mock version defined on export
		<verexpr token="#ZTUAC#" string="(#VER# #EQ# 257)">ZTUAC</verexpr>
		<verexpr token="#PC#" string="(#VER# #EQ# 257)">PC</verexpr>
		<verexpr token="#JWE#" string="(#VER# #EQ# 258)">JWE</verexpr>
		<verexpr token="#PZ#" string="(#VER# #EQ# 260)">PZ all</verexpr>
		<verexpr token="#JWE2DEV#" string="(#VER# #EQ# 261)">JWE2</verexpr>
		<verexpr token="#JWE2#" string="(#VER# #EQ# 262)">JWE2</verexpr>
		<verexpr token="#PC2#" string="((#VER# #EQ# 262) #AND# (#MVER# #EQ# 282))">PC2</verexpr>
	</token>

	<token name="global" attrs="vercond access">
        Global Tokens.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <global token="#VER#" string="version" />
        <global token="#MVER#" string="mani_version" />
    </token>

	<xi:include href="../ovl_base/ovl_base.xml" xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="xpointer(*/*)" />

	<version id="DLA" version="256" >Disneyland Adventures</version>mock version defined on extraction
	<version id="ZTUAC" version="257" >Zoo Tycoon</version>
	<version id="PC" version="257" >Planet Coaster</version>
	<version id="JWE" version="258" >Jurassic World Evolution</version>
	<version id="PZ" version="260" >Planet Zoo</version>
	<version id="JWE2DEV" version="261" >Jurassic World Evolution 2 Dev</version>
	<version id="JWE2" version="262" >Jurassic World Evolution 2</version>
	<version id="WAR" version="262" >Warhammer Age of Sigmar - Realms of Ruin</version>version conflict -.-
	<version id="PC2" version="262" mani_version="282">Planet Coaster 2</version>

    <basic name="ChannelName" integral="true" countable="true">
		<!--    PC uses ushort-->
		<!--    JWE uses uint-->
    </basic>

    <basic name="BoneIndex" integral="true" countable="true">
		<!--    War uses ushort-->
		<!--    before uses ubyte-->
    </basic>

	<bitfield name="ManisDtype" storage="uint">
		# ZTUAC: 14, probably more
		# PC: 0, 8, 9
		# PZ: 0, 1, 4, 5, 6, 32, 34, 36, 37, 38
		# JWE2 dev: 0, 4, 5, 6, 32, 34, 36, 37, 38
		# JWE2: 0, 4, 5, 6, 64, 66, 68, 69, 70
		# WH: unknown
		<member width="2" pos="0" name="unk" type="int"/>
<!--		<member width="1" pos="2" name="compression" type="bool"/>--> tempting, but PC sets compression on old_list
<!--		<member width="1" pos="3" name="old_list" type="bool"/>-->
		<member width="2" pos="2" name="compression" type="int"/>
		<member width="1" pos="4" name="use_ushort" type="int"/>
		<member width="2" pos="5" name="has_list" type="int"/>only on if compressed
	</bitfield>

	<bitfield name="ManisDtypePC2" storage="uint">
		# PC2: 0, 48, 49, 112, 113, 114 (2024-11-12)
		<member width="3" pos="0" name="unk" type="int"/>
		<member width="1" pos="3" name="use_ushort" type="int"/>
		<member width="1" pos="4" name="compression" type="int"/>
		<member width="2" pos="5" name="has_list" type="int"/>only on if compressed
	</bitfield>

	<bitfield name="StoreKeys" storage="ubyte">
		<member width="1" pos="0" name="x" type="bool"/>
		<member width="1" pos="1" name="y" type="bool"/>
		<member width="1" pos="2" name="z" type="bool"/>
	</bitfield>

    <compound name="ManisRoot" inherit="MemStruct">
		24 bytes for DLA, ZTUAC, PC, JWE, old PZ
		32 bytes for PZ1.6+, JWE2
		<add name="mani files size" type="ushort">16 * mani count</add>
        <add name="hash block size" type="ushort">4 * string count</add>
		<add name="zero 0" type="uint"/>
        <add name="zero 1" type="uint64" />
        <add name="zero 2" type="uint64" />
        <add name="zero 3" type="uint64" since="260" />
    </compound>

	<compound name="ManiInfo" >
        288 bytes for JWE (last member is not padded at end in stock) / PZ
        304 bytes for PC, ZTUAC (however the last 2 bytes are alignment, and not on the last member of the array)
        320 bytes for war
        304 bytes for PC2, possibly different manis dtype apparently use_ushort has moved
        <add name="ref" type="Empty"/>
        <add name="duration" type="float"/>
		<add name="FrameCount" type="uint"/>
		determines the format of keys data
		<add name="dtype" type="ManisDtype" vercond="!#PC2#"/>
		<add name="dtype" type="ManisDtypePC2" vercond="#PC2#"/>
		<add name="zeros 0 " type="uint" arr1="3"/>
		<add name="extra pc 1" type="ushort" until="258"/>jwe1 also
		<add name="PosBoneCount" type="ushort"/>
		<add name="OriBoneCount" type="ushort"/>
		<add name="SclBoneCount" type="ushort"/>
		<add name="unk_count_0" type="ushort"/>JWE2 dev mentions MorphCount and VisCount
		<add name="unk_count_1" type="ushort"/>
		<add name="unk_count_2" type="ushort"/>
		<add name="extra count " type="ushort" vercond="#PC2#"/>
		<add name="FloatCount" type="ushort"/>
		in DLA, these store count * frame_count
		<add name="PosBoneCount Repeat" type="ushort" until="257"/>
		<add name="OriBoneCount Repeat" type="ushort" until="257"/>
		<add name="SclBoneCount Repeat" type="ushort" until="257"/>
		<add name="unk 0" type="ushort" until="257"/>
		<add name="unk 1" type="ushort" until="257"/>
		<add name="root_pos_bone" type="BoneIndex" arg="dtype" default="255"/>
		<add name="root_ori_bone" type="BoneIndex" arg="dtype" default="255"/>
		<add name="target bone count" type="uint64" >can include joints, such as in PZ water wheel count 5 vs ms2 2 bones, plus joints</add>
		# these might be alignment for the pointers
		<add name="unk 2" type="ushort" />
		<add name="unk 3" type="ushort" />
		<add name="unk 4" type="ushort" />
		<add name="unk 5" type="ushort" until="257"/># on PC
		<add name="extra zeros pc" type="ushort" arr1="6" until="257"/>for ZTUAC rhinos
		not on JWE1
		<add name="unk 5" type="ushort" since="260"/># on PZ, JWE2
		<add name="unk 6" type="ushort" vercond="#PC2#"/>
		<add name="unk 7" type="ushort" vercond="#PC2#"/>
		<add name="unk 8" type="ushort" vercond="#PC2#"/>
		<add name="pointers" type="uint64" arr1="27" >216 bytes</add>
		<add name="extra_for_use_ushort" type="ushort" arr1="7" cond="dtype\use_ushort"/>PC2 goes wrong here ig
		<add name="PosBoneMin" type="BoneIndex" arg="dtype"/>
		<add name="PosBoneMax" type="BoneIndex" arg="dtype"/>
		<add name="OriBoneMin" type="BoneIndex" arg="dtype"/>
		<add name="OriBoneMax" type="BoneIndex" arg="dtype"/>
		<add name="SclBoneMin" type="BoneIndex" arg="dtype"/>
		<add name="SclBoneMax" type="BoneIndex" arg="dtype"/>
		<add name="PosBoneCount Related" type="BoneIndex" arg="dtype" since="258"/>
		<add name="PosBoneCount Repeat" type="BoneIndex" arg="dtype" since="258"/>
		<add name="OriBoneCount Related" type="BoneIndex" arg="dtype" since="258"/>
		<add name="OriBoneCount Repeat" type="BoneIndex" arg="dtype" since="258"/>
		<add name="SclBoneCount Related" type="BoneIndex" arg="dtype" since="258"/>
		<add name="SclBoneCount Repeat" type="BoneIndex" arg="dtype" since="258"/>
		<add name="zero 0 end" type="ushort" since="258"/>
		<add name="zero 1 end" type="ushort" />for PC and JWE1, this is alignment and not present at the end of the mani_infos array
		<add name="pad2" type="PadAlign" template="ref" arg="16" since="258"/>not on ZTUAC rhinos
    </compound>

    <compound name="Buffer1">
		the game verifies that hash and target name match
		if they don't, the target won't be animated
		<add name="target hashes" type="uint" arr1="#ARG#"/>
		<add name="target names" type="ZString" arr1="#ARG#"/>
		<add name="bone pad" type="PadAlign" template="target names" arg="4" since="260"/>not on DLA, may be present on PC, not on JWE1
    </compound>

    <compound name="KeysReader">
    </compound>

    <compound name="InfoHeader">
        Custom header struct
        <add name="version" type="ushort"/>
        <add name="mani_version" type="ushort"/>
        <add name="mani count" type="uint"/>
        <add name="stream" type="ZString" />
        <add name="names" type="ZString" arr1="mani count"/>
        <add name="header" type="ManisRoot"/>
        <add name="mani infos" type="ManiInfo" arr1="mani count"/>
        <add name="name buffer" type="Buffer1" arg="header\hash block size / 4"/>
        <add name="keys buffer" type="KeysReader" arg="#SELF#"/>
    </compound>

	<compound name="Vector4H" size="8">
		<field name="x" type="normshort"/>
		<field name="y" type="normshort"/>
		<field name="z" type="normshort"/>
		idiosyncratic - w is last!
		<field name="w" type="normshort"/>
	</compound>

	<compound name="Vector3H" size="8">
		<field name="x" type="normshort"/>
		<field name="y" type="normshort"/>
		<field name="z" type="normshort"/>
	</compound>

	<compound name="Vector2" size="8">
		<field name="x" type="float"/>
		<field name="y" type="float"/>
	</compound>

    <compound name="FloatsGrabber" >
    </compound>

    <compound name="Segment" >
		<add name="unk a" type="uint" >seen 0 or 2</add>
		<add name="unk b" type="uint" >seen 0 or 2</add>
		<add name="ptr_ori_result" type="uint64" />ready for anim_wavelet_data_rel_3
		<add name="ptr_pos_result" type="uint64" />ready for anim_wavelet_data_rel_3
		<add name="ptr_scale_0_result" type="uint64" />?
		<add name="ptr_scale_1_result" type="uint64" />?
		<add name="ptr_morph_result" type="uint64" />?
		<add name="ptr_CompressedManiData" type="uint64" />ready for anim_decompress_handler_rel
		<add name="byte size" type="uint64" >to be read sequentially starting after this array </add>
		<add name="ptr_compressed_keys" type="uint64" />ready for anim_decompress_handler_rel
		<add name="zeros 1" type="uint64" />
    </compound>

    <compound name="String32" >
		<add name="ref" type="Empty"/>
		<add name="name" type="ZString"/>
		<add name="pad" type="PadAlign" template="ref" arg="32"/>
    </compound>

    <compound name="LocBound" >
		<add name="loc min" type="Vector3"/>
		<add name="loc extent" type="Vector3"/>might be extent, but not sure about how it is encoded
    </compound>

    <compound name="SegmentsReader" >
    </compound>

	<compound name="CompressedManiData">
		<add name="FrameCount" type="uint"/>
		<add name="OriBoneCount" type="uint"/>
		<add name="PosBoneCount" type="uint"/>
		<add name="SclBoneCount" type="ushort"/>
		<add name="MorphBoneCount" type="ushort"/>
		<add name="zeros 18" type="uint" arr1="8" since="257">fixed 32 bytes</add>
		<add name="name_a" type="String32" until="256"/>
<!--		<add name="name_b" type="String32" until="256"/>-->used in DLA when no scales are keyed?
		used eg in PZ animal boxes, which have scale keys
		<add name="scale min" type="Vector3" />
		<add name="scale max" type="Vector3" />
		<add name="ptr_first_segment" type="uint64" />
		<add name="unk 1" type="uint" since="257"/>
		<add name="unk 2" type="uint" since="257" />
		<add name="SegmentCount" type="ushort" >counts temporal segments</add>
		<add name="QuantisationLevel" type="ushort" >usually 420 or 52905</add>
		<add name="unk 1" type="uint" until="256"/>DLA
		<add name="unk 2" type="uint" until="256" />DLA
		<add name="ref2" type="Empty"/>
		<add name="unk 3" type="uint" >?</add>
		<add name="loc_bound_indices" type="ubyte" arr1="PosBoneCount"/>
		<add name="anoth pad" type="PadAlign" template="ref2" arg="4"/>
		<add name="loc_bounds" type="FloatsGrabber" arg="loc_bound_indices" />not present without pos bones
		<add name="anoth pad2" type="PadAlign" template="#ARG# \ ref" arg="16"/>
		<add name="segments" type="Segment" arr1="SegmentCount" >give the byte size of the various temporal segments</add>
		<add name="segments_data" type="SegmentsReader" arg="segments"/>
	</compound>

	<compound name="WarExtraPart">
		<add name="stuff" type="ushort" arr1="24"/>
	</compound>

	<compound name="WarExtra">
		<add name="zeros" type="uint" arr1="1"/>
		<add name="stuff" type="WarExtraPart" arr1="4"/>
	</compound>

    <compound name="LimbInfo" >
		<add name="zeros 0" type="uint64" > </add>
		<add name="bone" type="ChannelName" arg="#ARG#">seen only ...Horselink_joint</add>
		<add name="counta" type="uint" > </add>
    </compound>

    <compound name="LimbInfoZT" >
		32 bytes
		<add name="footplant" type="ChannelName"/>
		<add name="index b" type="ushort"/>
		<add name="zero 0" type="ushort"/>
		<add name="count a" type="ushort"/>
		<add name="count b" type="ushort"/>
		<add name="zero 1" type="ushort"/>
		<add name="zeros" type="uint" arr1="5"/>
    </compound>

    <compound name="LimbChunkReader" >
    </compound>

    <compound name="LimbChunkReaderZt" >
    </compound>

    <compound name="WeirdElementOne" >
		<add name="float 0" type="float"> </add>
		<add name="vec 0" type="Vector3"/>
		<add name="zeros 0" type="uint64" arr1="2"> </add>
		<add name="vec 1" type="Vector3"/>
		<add name="countb" type="uint"> </add>
    </compound>

    <compound name="WeirdElementTwo" >
		<add name="many floats" type="float" arr1="7"> </add>
    </compound>

    <compound name="WeirdElementTwoReader" >
    </compound>

    <compound name="LimbChunk" >
		arg is LimbInfo
		<add name="list one" type="WeirdElementOne" arr1="#ARG#\counta" >for LimbChunk_list[n] needs limbs[n]'s counta for array length</add>
		<add name="list two" type="WeirdElementTwoReader" arg="list one" >needs sum of countb's from weird list one</add>
    </compound>

    <compound name="ElemZt" >
		<add name="floats" type="float" arr1="4"> </add>
		<add name="a" type="ushort"/>
		<add name="b" type="ushort"/>
		<add name="c" type="ushort"/>
		<add name="d" type="ushort"/>
    </compound>

    <compound name="LimbChunkZt" >
		arg is LimbInfo
		<add name="list one" type="float" arr1="#ARG#\count a" arr2="2"/>
		<add name="list two" type="ElemZt" arr1="#ARG#\count b" />
    </compound>

    <compound name="LimbTrackDataZT" >
		<add name="ref" type="Empty"/>
		<add name="limb_count" type="uint64"/>
		<add name="pad" type="uint64"/>
		<add name="limbs" type="LimbInfoZT" arr1="limb_count"/>
		<add name="limbs_data" type="LimbChunkReaderZt" arg="limbs"/>
    </compound>

    <compound name="LimbTrackData" >
		<add name="ref" type="Empty"/>
		<add name="padding 0" type="SmartPadding"/>
		<add name="limb_count" type="ushort"/>2 for bipeds, 4 for quadrupeds
		<add name="flag" type="ushort" > </add>
		<add name="zero 1" type="uint" > </add>
		<add name="limbs" type="LimbInfo" arr1="limb_count" arg="#ARG#"/>
		<add name="limbs_data" type="LimbChunkReader" arg="limbs"/>
    </compound>

    <compound name="UshortLut" >
		in seemingly uncompressed manis
		<add name="ref" type="Empty"/>
		<add name="align" type="uint64" arr1="1316" />
		<add name="a" type="ubyte" arr1="48" />
		<add name="b" type="ubyte" arr1="48" />
		<add name="zeros" type="ubyte" arr1="48" />
		<add name="target_bone_count" type="uint"/>
		<add name="offsets" type="uint" arr1="82" />
		<add name="flags" type="ubyte" arr1="96" />
		<add name="ref2" type="Empty"/>
		the uncompressed keys that follow appear to be interleaved with some kind of lut
    </compound>

    <compound name="UncompressedManiDataPC2" >
		in compressed manis
		<add name="z0" type="uint64" arr1="3" />
		<add name="c0" type="uint64" />
		<add name="z1" type="uint64" arr1="3" />
		<add name="c2" type="uint64" />
		<add name="z2" type="uint64" arr1="7" />
		<add name="target_bone_count" type="uint64" />
    </compound>

	<compound name="CompressedManiDataPC2" >
		in compressed manis
		<add name="following_size" type="ushort" />
<!--		<add name="following_size" type="uint" />-->
		<add name="ref" type="Empty"/>
		<add name="databytes" type="ubyte" arr1="following_size" />apparently includes the two 00 00 after following_size or it oversteps the padding bounds
		<add name="ref2" type="Empty"/>
<!--		<add name="pad" type="PadAlign" template="ref" arg="4"/>-->
    </compound>

	<compound name="ManiBlock" >
		aligned to 16
		<add name="ref" type="Empty"/>
		define the channel names
		<add name="PosBonesNames" type="ChannelName" arr1="#ARG#\PosBoneCount"/>
		<add name="OriBonesNames" type="ChannelName" arr1="#ARG#\OriBoneCount"/>
		<add name="SclBonesNames" type="ChannelName" arr1="#ARG#\SclBoneCount"/>
		<add name="FloatsNames" type="ChannelName" arr1="#ARG#\FloatCount"/>
		map channel to corresponding bone index
		<add name="pos_channel_to_bone" type="#T#" arr1="#ARG#\PosBoneCount"/>
		<add name="ori_channel_to_bone" type="#T#" arr1="#ARG#\OriBoneCount"/>
		<add name="scl_channel_to_bone" type="#T#" arr1="#ARG#\SclBoneCount"/>
		map bone to corresponding channel, -1 for bones in range that are not keyed
		<add name="pos_bone_to_channel" type="#T#" arr1="(#ARG#\PosBoneMax - #ARG#\PosBoneMin) + 1" cond="#ARG#\PosBoneMin #LTE# #ARG#\PosBoneMax"/>
		<add name="ori_bone_to_channel" type="#T#" arr1="(#ARG#\OriBoneMax - #ARG#\OriBoneMin) + 1" cond="#ARG#\OriBoneMin #LTE# #ARG#\OriBoneMax"/>
		<add name="scl_bone_to_channel" type="#T#" arr1="(#ARG#\SclBoneMax - #ARG#\SclBoneMin) + 1" cond="#ARG#\SclBoneMin #LTE# #ARG#\SclBoneMax"/>
		<add name="pad" type="PadAlign" template="ref" arg="4"/>
		start of uncompressed keyframe data
		<add name="UshortLut" type="UshortLut" cond="(#ARG#\dtype\use_ushort #EQ# 1) #AND# (#ARG#\dtype\compression #EQ# 0)" />
		<add name="start_keys_ref" type="Empty"/>
		<add name="PosBones" type="float" arr1="#ARG#\FrameCount" arr2="#ARG#\PosBoneCount" arr3="3" cond="#ARG#\dtype\compression #EQ# 0" />
		<add name="OriBones" type="normshort" arr1="#ARG#\FrameCount" arr2="#ARG#\OriBoneCount" arr3="4" cond="#ARG#\dtype\compression #EQ# 0" />
		found in DLA SpaceMountain animations.manisetd740d135, and PZ crane
		<add name="ShrBones" type="float" arr1="#ARG#\FrameCount" arr2="#ARG#\SclBoneCount" arr3="2" cond="#ARG#\dtype\compression #EQ# 0" />
		<add name="SclBones" type="float" arr1="#ARG#\FrameCount" arr2="#ARG#\SclBoneCount" arr3="3" cond="#ARG#\dtype\compression #EQ# 0" />
		always uncompressed, possibly because ACL didn't support scalars
		<add name="Floats" type="float" arr1="#ARG#\FrameCount" arr2="#ARG#\FloatCount" />
		<add name="uncompressed_pad_PC2" type="PadAlign" template="ref" arg="8" vercond="#PC2#"/>
		<add name="precompressed" type="UncompressedManiDataPC2" vercond="#PC2#" arg="#SELF#" cond="#ARG#\dtype\compression #GT# 0" />varies between the two janitor manis, padding just before 'frame count'

		<add name="uncompressed_pad" type="PadAlign" template="ref" arg="16"/>
		<add name="extra_war" type="WarExtra" arg="#SELF#" cond="#ARG#\dtype\use_ushort #EQ# 1" vercond="!#PC2#"/>
		<add name="compressed" type="CompressedManiDataPC2" vercond="#PC2#" arg="#SELF#" cond="#ARG#\dtype\compression #GT# 0" />varies between the two janitor manis, padding just before 'frame count'
		<add name="compressed" type="CompressedManiData" vercond="!#PC2#" arg="#SELF#" cond="#ARG#\dtype\compression #GT# 0" />
		# aligned to 16
		<add name="LimbTrackData" type="LimbTrackData" cond="#ARG#\dtype\has_list #GT# 0" arg="#SELF#" vercond="!#PC2#"/>
		# might be aligned to 8
		<add name="LimbTrackData" type="LimbTrackDataZT" cond="#ARG#\dtype\compression #GT# 2" until="257" vercond="!#PC2#"/>
    </compound>

</niftoolsxml>
